// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RegisteredUser {
  user_id      String @id @default(uuid())
  full_name    String @db.VarChar(50)
  email        String @unique
  phone_number String
  password     String

  role    Role @relation(fields: [role_id], references: [role_id])
  role_id Int

  company Company?

  @@map("registered_users")
}

model Role {
  role_id Int    @id @default(autoincrement())
  name    String @db.VarChar(20)

  users RegisteredUser[]

  @@map("roles")
}

// Companies
model Company {
  company_id String @id @default(uuid())

  User    RegisteredUser @relation(fields: [user_id], references: [user_id])
  user_id String         @unique

  name       String
  industry   String?
  npwp_digit String? @db.VarChar(16)
  package_type String @default("free")

  company_logo          CompanyLogo?
  company_branches      CompanyBranches[]
  company_announcements CompanyAnnouncement[]
  company_files         CompanyFile[]

  @@map("companies")
}

model CompanyBranches {
  company_branch_id String @id @default(uuid())

  company    Company @relation(fields: [company_id], references: [company_id])
  company_id String 

  email        String?
  phone_number String? @db.VarChar(15)
  address      String? @db.VarChar(255)
  province     String? @db.VarChar(50)
  city         String? @db.VarChar(50)
  size         Int?    @db.Integer()
  hq_initial   String? @db.VarChar(50)
  hq_code      String? @db.VarChar(50)
  umr          Float?
  umr_province Float?
  umr_city     Float?
  bpjs         String? @db.VarChar(50)

  company_announcement_to CompanyAnnouncementTo[]
  employees               Employee[]
  job_positions           JobPosition[]
  employment_statuses     EmploymentStatus[]
  employee_tasks          EmployeeTask[]
  reimbursement           Reimbursement[]
  attendances             Attendance[]

  @@map("company_branches")
}

model CompanyLogo {
  company_logo_id Int @id @default(autoincrement())

  company    Company @relation(fields: [company_id], references: [company_id])
  company_id String  @unique

  file_name String
  file_size Int
  file_url  String

  @@map("company_logos")
}

model CompanyFile {
  company_file_id Int @id @default(autoincrement())

  company    Company @relation(fields: [company_id], references: [company_id])
  company_id String

  file_name                             String
  file_size                             Int
  file_type                             String
  file_url                              String
  description                           String?                             @db.VarChar(255)
  company_announcement_file_attachments CompanyAnnouncementFileAttachment[]

  @@map("company_files")
}

model CompanyAnnouncement {
  company_announcement_id Int @id @default(autoincrement())

  company    Company @relation(fields: [company_id], references: [company_id])
  company_id String

  title                                 String
  description                           String
  company_announcement_to               CompanyAnnouncementTo[]
  company_announcement_file_attachments CompanyAnnouncementFileAttachment[]

  @@map("company_announcements")
}

model CompanyAnnouncementTo {
  company_branches  CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String

  announcement            CompanyAnnouncement @relation(fields: [company_announcement_id], references: [company_announcement_id])
  company_announcement_id Int

  @@id([company_branch_id, company_announcement_id])
  @@map("company_announcement_to")
}

model CompanyAnnouncementFileAttachment {
  company_announcement    CompanyAnnouncement @relation(fields: [company_announcement_id], references: [company_announcement_id])
  company_announcement_id Int

  company_file    CompanyFile @relation(fields: [company_file_id], references: [company_file_id])
  company_file_id Int

  @@id([company_announcement_id, company_file_id])
  @@map("company_announcement_file_attachements")
}

//Employees
model JobPosition {
  job_position_id Int @id @default(autoincrement())

  company_branch    CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String

  name      String
  employees Employee[]

  @@map("job_positions")
}

model EmploymentStatus {
  employment_status_id Int @id @default(autoincrement())

  company_branch    CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String

  name      String
  employees Employee[]

  @@map("employment_statuses")
}

model Employee {
  employee_id String @id @default(uuid())

  company_branch    CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String

  job_position    JobPosition @relation(fields: [job_position_id], references: [job_position_id])
  job_position_id Int

  employment_status    EmploymentStatus @relation(fields: [employment_status_id], references: [employment_status_id])
  employment_status_id Int

  first_name            String
  last_name             String
  email                 String          @unique
  phone_number          String          @db.VarChar(15)
  place_of_birth        String
  birth_date            DateTime        @db.Date
  marital_status        String          @db.VarChar(20)
  blood_type            String          @db.VarChar(3)
  religion              String          @db.VarChar(20)
  identity_type         String          @db.VarChar(20)
  identity_number       String          @db.VarChar(20)
  identity_expired_date DateTime        @db.Date
  postcal_code          String          @db.VarChar(10)
  citizen_id_address    String
  residential_address   String
  bank_account_number   String?         @db.VarChar(20)
  bank_type             String?         @db.VarChar(20)
  wage                  Float
  password              String
  tasks                 EmployeeTask[]  @relation("employee")
  give_tasks            EmployeeTask[]  @relation("manager")
  files                 EmployeeFile[]
  reimbursement         Reimbursement[]
  shifts                Shift[]
  attendances           Attendance[]
  submissions           Submission[]

  @@map("employees")
}

model EmployeeTask {
  task_id Int @id @default(autoincrement())

  company_branch    CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String

  employee    Employee @relation("employee", fields: [employee_id], references: [employee_id])
  employee_id String

  title       String
  description String
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date

  given_by    Employee @relation("manager", fields: [given_by_id], references: [employee_id])
  given_by_id String

  @@map("employee_tasks")
}

model EmployeeFile {
  employee_file_id      Int                           @id @default(autoincrement())
  employee              Employee                      @relation(fields: [employee_id], references: [employee_id])
  employee_id           String
  file_name             String
  file_size             Int
  file_type             String
  file_url              String
  file_for              String?                       @db.VarChar(20)
  reimbursements        ReimbursementFileAttachment[]
  attendance_check      AttendanceCheck?
  permission_submission PermissionSubmission?
  leave_submission      LeaveSubmission?
  mutation_submission   MutationSubmission?

  @@map("employee_files")
}

model Reimbursement {
  reimbursement_id Int @id @default(autoincrement())

  company_branch    CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String

  employee    Employee @relation(fields: [employee_id], references: [employee_id])
  employee_id String

  total            Float
  description      String
  date             DateTime                      @db.Date
  file_attachments ReimbursementFileAttachment[]

  @@map("reimbursements")
}

model ReimbursementFileAttachment {
  reimbursement    Reimbursement @relation(fields: [reimbursement_id], references: [reimbursement_id])
  reimbursement_id Int

  employee_file    EmployeeFile @relation(fields: [employee_file_id], references: [employee_file_id])
  employee_file_id Int

  @@id([reimbursement_id, employee_file_id])
  @@map("reimbursement_file_attachments")
}

model Shift {
  shift_id    Int          @id @default(autoincrement())
  employee    Employee     @relation(fields: [employee_id], references: [employee_id])
  employee_id String
  start_time  String
  end_time    String
  attendance  Attendance[]

  @@map("shifts")
}

enum AttendanceStatus {
  ACCEPTED
  REJECTED
}

model Attendance {
  attendance_id Int @id @default(autoincrement())

  employee    Employee @relation(fields: [employee_id], references: [employee_id])
  employee_id String

  shift    Shift @relation(fields: [shift_id], references: [shift_id])
  shift_id Int
  company_branch    CompanyBranches @relation(fields: [company_branch_id], references: [company_branch_id])
  company_branch_id String
  date             DateTime         @db.Date
  attendance_check AttendanceCheck?

  @@map("attendances")
}

enum AttendanceCheckStatus {
  REJECTED
  PENDING
  ACCEPTED
}

enum AttendanceCheckType {
  CHECK_IN
  CHECK_OUT
}

model AttendanceCheck {
  attendance_check_id Int @id @default(autoincrement())

  attendance_id Int        @unique
  attendance    Attendance @relation(fields: [attendance_id], references: [attendance_id])

  employee_file_id Int                   @unique
  employee_file    EmployeeFile          @relation(fields: [employee_file_id], references: [employee_file_id])
  type             AttendanceCheckType
  time             String
  long             Float
  lat              Float
  status           AttendanceCheckStatus

  @@map("attendance_checks")
}

enum PermissionType {
  SAKIT
  IZIN
}

enum SubmissionStatus {
  ACCEPTED
  PENDING
  REJECTED
}

model Submission {
  submission_id         Int                   @id @default(autoincrement())
  submission_date       DateTime
  type                  String                @db.VarChar(30)
  employee              Employee              @relation(fields: [employee_id], references: [employee_id])
  employee_id           String
  status                SubmissionStatus
  permission_submission PermissionSubmission?
  leave_submission      LeaveSubmission?
  mutation_submission   MutationSubmission?

  @@map("submissions")
}

model PermissionSubmission {
  permission_submission_id Int @id @default(autoincrement())

  employee_file     EmployeeFile   @relation(fields: [employee_file_id], references: [employee_file_id])
  submission        Submission     @relation(fields: [submision_id], references: [submission_id])
  submision_id      Int            @unique
  employee_file_id  Int            @unique
  from              DateTime
  to                DateTime
  permission_reason String         @db.VarChar(100)
  type              PermissionType

  @@map("permission_submission")
}

model LeaveSubmission {
  leave_permission_id Int          @id @default(autoincrement())
  employee_file_id    Int          @unique
  employee_file       EmployeeFile @relation(fields: [employee_file_id], references: [employee_file_id])
  submission          Submission   @relation(fields: [submision_id], references: [submission_id])
  submision_id        Int          @unique

  from         DateTime
  to           DateTime
  leave_reason String   @db.VarChar(100)
  leave_type   String   @db.VarChar(10)

  @@map("leave_permission")
}

model MutationSubmission {
  mutation_permission_id Int          @id @default(autoincrement())
  employee_file          EmployeeFile @relation(fields: [employee_file_id], references: [employee_file_id])
  submission             Submission   @relation(fields: [submision_id], references: [submission_id])
  submision_id           Int          @unique

  employee_file_id Int    @unique
  mutation_reason  String @db.VarChar(100)

  @@map("mutation_submission")
}
